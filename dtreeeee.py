# -*- coding: utf-8 -*-
"""dtreeeee.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Ull91ckC0anl0bxjdkhKNQjqF_Yul85
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_excel('RIDGE.xlsx')

df.head()

##converting data type

df['base_price'] = pd.to_numeric(df['base_price'])
df['original_price'] = pd.to_numeric(df['original_price'])
df['discount_amount'] = pd.to_numeric(df['discount_amount'])
df['price'] = pd.to_numeric(df['price'])
#df['product_type'] = pd.to_numeric(df['product_type'])
##df = df.drop(['product_type'], axis=1)

df.dtypes
##df.head(6)
##df['base_price'].dtype

from sklearn.model_selection import train_test_split

X = df.drop('qty_ordered',axis=1)
y = df['qty_ordered']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)

from sklearn.tree import DecisionTreeClassifier

X_train.dtypes

dtree = DecisionTreeClassifier(criterion = 'entropy')

dtree.fit(X_train,y_train)

predictions = dtree.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

conf_matrix=confusion_matrix(y_test,predictions)
accuracy=accuracy_score(y_test,predictions)

conf_matrix,accuracy

print(classification_report(y_test,predictions))

print(confusion_matrix(y_test,predictions))

from IPython.display import Image  
from sklearn.externals.six import StringIO  
from sklearn.tree import export_graphviz
import pydot 
import pickle
import pydotplus

features = list(df.columns[1:])
features

dot_data = StringIO()

export_graphviz(dtree, out_file=dot_data,feature_names=features,filled=True,rounded=True)

graph = pydotplus.graph_from_dot_data(dot_data.getvalue())

Image(graph.create_png())

with open('model_dump_dtree', 'wb') as f:
    pickle.dump(dtree,f)

##to open the model
with open('model_dump_dtree', 'rb') as f1:
    ml_wv = pickle.load(f1)

ml_wv.fit(X_test,y_test)

predictions = ml_wv.predict(X_test)

conf_matrix=confusion_matrix(y_test,predictions)
accuracy=accuracy_score(y_test,predictions)

conf_matrix,accuracy

from IPython.display import Image  
from sklearn.externals.six import StringIO  
from sklearn.tree import export_graphviz
import pydot 
import pickle
import pydotplus

features = list(df.columns[1:])
features

dot_data = StringIO()  
export_graphviz(ml_wv, out_file=dot_data,feature_names=features,filled=True,rounded=True)

graph = pydot.graph_from_dot_data(dot_data.getvalue())  
Image(graph[0].create_png())

